
//----------------------------------------------------------------------------
//   Socket自用类                                                v1.0
//   作者 ： yk
//----------------------------------------------------------------------------
//
//   email:  iamabirdyk219@gmail.com
//
//
//----------------------------------------------------------------------------
//   说明：
//   这个socket类仅仅只是本人为使用方便而进行编写。由于知识有限，所编写的程序必定存在很大问
//   题。如发现问题请联系我，互相学习交流。在此谢过。本人将不断对其优化。
//   
//
//
//   v1.1 JUN 2019
//  
//----------------------------------------------------------------------------



#ifndef _SOCKET_H
#define _SOCKET_H


//-----------------------------------------------------------------------------
//
// 为Windows和Linux提供系统头文件，用于客户端与服务端程序的构建。
// 
//-----------------------------------------------------------------------------


#include<iostream>
#include<fstream>
#include<string>
#include<vector>
#include<sys/types.h>
#include<cstring>
#include<string.h>

#ifdef _WIN32

#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include<WinSock2.h>
#include<Ws2tcpip.h>
#include<windows.h>
#pragma comment(lib,"ws2_32.lib")

//windows
#elif __linux__
#include <errno.h>
#include<sys/socket.h>
#include<arpa/inet.h>
#include<sys/wait.h>
#include<unistd.h>
#include<dirent.h>

//linux
#endif


//-----------------------------------------------------------------------------
// 基于IPV4_TCP网络通信协议的客户端类。
//
// 开放系统函数，使用者可以自行进行创建，也可直接使用函数Client（ip，port）
// 函数进行创建。
//-----------------------------------------------------------------------------
class Socket_Client_IPv4_TCP
{
public:
	Socket_Client_IPv4_TCP(const std::string ip = "127.0.0.1", const unsigned int port = 9514)
		:_IP(ip), _Port(port), _Buflen(1024) 
	{ }

//----------------------------------------------------------------------------------------------
//函数声明：bool Client_eastablish();	
//函数参数：   无
//函数功能：
//		创建socket获取ID号
//----------------------------------------------------------------------------------------------
	bool Client_eastablish();


//----------------------------------------------------------------------------------------------
//函数声明：void Client_Setaddress();	
//函数参数：   无
//函数功能：
//		配置客户端端口地址及所用协议
//----------------------------------------------------------------------------------------------
	void Client_Setaddress();

//----------------------------------------------------------------------------------------------
//函数声明：bool Client_connect();	
//函数参数：   无
//函数功能：
//		连接指定IP地址上的服务端
//----------------------------------------------------------------------------------------------
	bool Client_connect();


//----------------------------------------------------------------------------------------------
//函数声明：bool Client_sendStr();	
//函数参数：   _str =[输入的字符串，默认Hello World！]
//函数功能：
//		发送给服务端一个字符串
//----------------------------------------------------------------------------------------------
	bool Client_sendStr(std::string _str = "[Hello World!]");


//----------------------------------------------------------------------------------------------
//函数声明：bool Client_receverStr();	
//函数参数：   *buf = [储存字符串]
//函数功能：
//		接收一个字符串
//----------------------------------------------------------------------------------------------
	bool Client_receverStr(char* buf);


//----------------------------------------------------------------------------------------------
//函数声明：bool Client_sendFile();	
//函数参数：  std::string _File_path =[ 一个文件的路径]
//函数功能：
//		发送一个指定的文件
//----------------------------------------------------------------------------------------------
	bool Client_sendFile(std::string _File_path = "in.txt");


//----------------------------------------------------------------------------------------------
//函数声明：bool Client_receverFile();	
//函数参数：  std::string _File_path =[ 一个文件的路径]
//函数功能：
//		接收一个指定的文件
//----------------------------------------------------------------------------------------------
	bool Client_receverFile(std::string _File_path = "out.txt");
	

//----------------------------------------------------------------------------------------------
//函数声明：bool Clinet_close();	
//函数参数：   无
//函数功能：
//		关闭socket ，释放占用ID
//----------------------------------------------------------------------------------------------
	bool Clinet_close();
	
	
//----------------------------------------------------------------------------------------------
//函数声明：bool _Client();	
//函数参数：   无
//函数功能：
//		创建并配置好客户端(简单用例)
//----------------------------------------------------------------------------------------------
	bool _Client();


	~Socket_Client_IPv4_TCP() {}

private:

	const std::string _IP;
	const unsigned int _Port;
	const long _Buflen;
	struct sockaddr_in Sockaddr_in;
	char _Buf[1024+1];
	#ifdef _WIN32                                                         //客户端相关信息

	WSADATA wsaData;
	SOCKET Client;
	WORD SocketVersion = MAKEWORD(2, 2);

	#elif __linux__
	char* error_message;
	int Client;

	#endif

};
//-----------------------------------------------------------------------------
// 基于IPV4_TCP网络通信协议的客户端类。
//
// 开放系统函数，使用者可以自行进行创建，也可直接使用函数Client（ip，port）
// 函数进行创建。
//-----------------------------------------------------------------------------



//-----------------------------------------------------------------------------
// 基于IPV4_TCP网络通信协议的服务端类。
//
// 开放系统函数，使用者可以自行进行创建，也可直接使用函数Sever（ip，port）
// 函数进行创建。
//-----------------------------------------------------------------------------
class Socket_Server_IPv4_TCP
{
public:
	Socket_Server_IPv4_TCP( const unsigned int port = 9514,const int waitlen=25)
		: _Port(port), _Buflen(1024),_waitlen(waitlen)
	{ }
	

//----------------------------------------------------------------------------------------------
//函数声明：bool Server_eastablish();	
//函数参数：   无
//函数功能：
//		初始化服务端并获取一个服务端ID
//----------------------------------------------------------------------------------------------
	bool Server_eastablish();


//----------------------------------------------------------------------------------------------
//函数声明：void Server_Setaddress();	
//函数参数：   无
//函数功能：
//		配置服务端地址信息
//----------------------------------------------------------------------------------------------
	void Server_Setaddress();


//----------------------------------------------------------------------------------------------
//函数声明：bool Server_Bindaddress();	
//函数参数：   无
//函数功能：
//		将地址信息与服务端ID进行绑定
//----------------------------------------------------------------------------------------------
	bool Server_Bindaddress();


//----------------------------------------------------------------------------------------------
//函数声明：bool Server_Listening();	
//函数参数：   无
//函数功能：
//		开启监听模式，监听指定ip及端口
//----------------------------------------------------------------------------------------------
	bool Server_Listening();


//----------------------------------------------------------------------------------------------
//函数声明：bool Server_accept();	
//函数参数：   无
//函数功能：
//		等待客户端连接
//----------------------------------------------------------------------------------------------
	bool Server_accept();


//----------------------------------------------------------------------------------------------
//函数声明：bool Server_sendStr();	
//函数参数：   std::string _str=[发送一个字符串指定[Hello World!]]
//函数功能：
//		向客户端发送一个字符串
//----------------------------------------------------------------------------------------------
	bool Server_sendStr(std::string _str = "[Hello World!]");

//----------------------------------------------------------------------------------------------
//函数声明：bool Server_receverStr();	
//函数参数：  char* buf -接收字符串
//函数功能：
//		从客户端接收一个字符串
//----------------------------------------------------------------------------------------------
	bool Server_receverStr(char* buf);


//----------------------------------------------------------------------------------------------
//函数声明：bool Server_sendFile();	
//函数参数： std::string _File_path - [文件路径默认in.txt]
//函数功能：
//		向客户端发送一个文件
//----------------------------------------------------------------------------------------------
	bool Server_sendFile(std::string _File_path = "in.txt");


//----------------------------------------------------------------------------------------------
//函数声明：bool Server_receverFile();	
//函数参数： std::string _File_path - [文件路径默认out.txt]
//函数功能：
//		从客户端接收一个文件
//----------------------------------------------------------------------------------------------
	bool Server_receverFile(std::string _File_path = "out.txt");


//----------------------------------------------------------------------------------------------
//函数声明：bool Server_close();	
//函数参数： 无
//函数功能：
//		关闭服务端
//----------------------------------------------------------------------------------------------
	bool Server_close();


//----------------------------------------------------------------------------------------------
//函数声明：bool _Server();	
//函数参数：   无
//函数功能：
//		创建并配置好服务端并开启监听模式(简单用例)
//----------------------------------------------------------------------------------------------
	bool _Server();


	~Socket_Server_IPv4_TCP() {}

private:

	const unsigned int _Port;
	const long _Buflen;
	const int _waitlen;
	char _Buf[1024 + 1];
	struct sockaddr_in _Client_address;
	struct sockaddr_in Sockaddr_in;
	#ifdef _WIN32
	WSADATA wsaData;
	SOCKET Sever;
	SOCKET Client;
	int client_addresslen = sizeof(this->_Client_address);
	WORD SocketVersion = MAKEWORD(2, 2);
	#elif __linux__

	int Sever;
	int Client;
	socklen_t client_addresslen = sizeof(this->_Client_address);
	char* error_message;
	#endif


};



#endif // _SOCKET_H



//----------------------------------------------------------------------------
//   Socket自用类                                                v1.0
//   作者 ： yk
//----------------------------------------------------------------------------
//
//   email:  iamabirdyk219@gmail.com
//
//
//----------------------------------------------------------------------------
//   说明：
//   这个socket类仅仅只是本人为使用方便而进行编写。由于知识有限，所编写的程序必定存在很大问
//   题。如发现问题请联系我，互相学习交流。在此谢过。本人将不断对其优化。
//   
//
//
//   v1.1 JUN 2019
//  
//----------------------------------------------------------------------------






